Leaflet js Docs


Absolutely! Here's a **line-by-line breakdown** of your HTML and JavaScript code with **line numbers** and **clear explanations**. I‚Äôll reference related lines when needed so you can follow the logic step by step.

---

### üß± HTML Structure

```html
1. <body>
```
- Starts the visible part of the webpage.

```html
2.   <div id="controls">
```
- Creates a section for user input controls (route selection).

```html
3.     <b>Enter Route:</b><br>
```
- Bold label and line break for clarity.

```html
4.     From: <input type="text" id="from" value="Sivakasi">
```
- Text input for the **starting location**, pre-filled with "Sivakasi".

```html
5.     To: <input type="text" id="to" value="Virudhunagar">
```
- Text input for the **destination**, pre-filled with "Virudhunagar".

```html
6.     <button onclick="startJourney()">Start Bus</button>
```
- Button that triggers the `startJourney()` function (see line 28).

```html
7.   </div>
```
- Closes the controls section.

```html
8.   <div id="map"></div>
```
- Placeholder for the Leaflet map.

```html
9.   <div id="info">
```
- Section to display journey stats.

```html
10.     Distance: <span id="distance">-</span> km |
11.     Speed: <span id="speed">-</span> km/h |
12.     Total Time: <span id="totaltime">-</span> min |
13.     Remaining: <span id="remaining">-</span> min
```
- Four `<span>` elements to dynamically show values like distance, speed, total time, and remaining time.

```html
14.   </div>
```
- Closes the info section.

---

### üöÄ JavaScript Logic

```html
15.   <script>
```
- Begins the JavaScript block.

```js
16.     var map = L.map('map').setView([9.52, 77.88], 10);
```
- Initializes the Leaflet map centered at Sivakasi with zoom level 10.

```js
17.     L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
18.       maxZoom: 19,
19.     }).addTo(map);
```
- Adds OpenStreetMap tiles to the map (line 17), allowing zoom up to level 19 (line 18).

```js
20.     var busIcon = L.icon({
21.       iconUrl: 'https://cdn-icons-png.flaticon.com/512/61/61212.png',
22.       iconSize: [40, 40],
23.       iconAnchor: [20, 40]
24.     });
```
- Creates a custom bus icon:
  - Line 21: URL of the icon image.
  - Line 22: Size of the icon.
  - Line 23: Anchor point (where the icon "sits" on the map).

```js
25.     var busMarker;
26.     var routeLine;
```
- Declares variables to hold the bus marker and route polyline.

---

### üìç Geocoding Function

```js
27.     async function getCoordinates(place) {
28.       let res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${place}`);
29.       let data = await res.json();
30.       if (data.length > 0) {
31.         return [parseFloat(data[0].lon), parseFloat(data[0].lat)];
32.       } else {
33.         alert("Location not found: " + place);
34.         throw new Error("Location not found");
35.       }
36.     }
```
- Converts a place name into coordinates using OpenStreetMap's Nominatim API.
  - Line 28: Fetches location data.
  - Line 29: Parses JSON response.
  - Line 30‚Äì31: Returns `[longitude, latitude]` if found.
  - Line 32‚Äì34: Alerts and throws error if not found.

---

### üöå Journey Function

```js
37.     async function startJourney() {
```
- Main function triggered by the button (line 6).

```js
38.       let fromPlace = document.getElementById("from").value;
39.       let toPlace = document.getElementById("to").value;
```
- Gets user input values from lines 4 and 5.

```js
40.       let start = await getCoordinates(fromPlace);
41.       let end = await getCoordinates(toPlace);
```
- Converts place names to coordinates using the function from line 27.

```js
42.       let res = await fetch(`https://router.project-osrm.org/route/v1/driving/${start[0]},${start[1]};${end[0]},${end[1]}?overview=full&geometries=geojson`);
43.       let data = await res.json();
```
- Fetches driving route from OSRM API and parses the response.

```js
44.       let route = data.routes[0].geometry.coordinates.map(c => [c[1], c[0]]);
```
- Converts route coordinates from `[lon, lat]` to `[lat, lon]` for Leaflet.

```js
45.       let distance = data.routes[0].distance; // meters
```
- Extracts total route distance.

```js
46.       if (routeLine) map.removeLayer(routeLine);
47.       if (busMarker) map.removeLayer(busMarker);
```
- Removes previous route and marker if they exist.

```js
48.       routeLine = L.polyline(route, {color: 'blue'}).addTo(map);
49.       map.fitBounds(routeLine.getBounds());
```
- Draws the route on the map and zooms to fit it.

```js
50.       busMarker = L.marker(route[0], {icon: busIcon}).addTo(map);
```
- Places the bus icon at the starting point.

---

### ‚è± Speed & Time Calculation

```js
51.       var avgSpeed = 60; // km/h fixed
52.       var speedMS = avgSpeed * 1000 / 3600; // m/s
53.       var totalTime = distance / speedMS; // seconds
54.       var totalSteps = route.length;
55.       var interval = (totalTime * 1000) / totalSteps; // ms per step
```
- Calculates:
  - Line 52: Speed in meters/second.
  - Line 53: Total time in seconds.
  - Line 55: Time between each animation step.

```js
56.       document.getElementById("distance").textContent = (distance/1000).toFixed(2);
57.       document.getElementById("speed").textContent = avgSpeed;
58.       document.getElementById("totaltime").textContent = (totalTime/60).toFixed(1);
```
- Updates the info panel (lines 10‚Äì12) with calculated values.

---

### üß≠ Bus Movement Animation

```js
59.       var i = 0;
60.       function moveBus() {
61.         busMarker.setLatLng(route[i]);
```
- Moves the bus marker to the next point.

```js
62.         var progress = i / totalSteps;
63.         var remainingTime = (totalTime/60) * (1-progress);
64.         document.getElementById("remaining").textContent = remainingTime.toFixed(1);
```
- Calculates and updates remaining time (line 13).

```js
65.         i++;
66.         if (i < totalSteps) {
67.           setTimeout(moveBus, interval);
68.         }
69.       }
```
- Recursively calls `moveBus()` with a delay to animate the journey.

```js
70.       moveBus();
71.     }
```
- Starts the animation.

```html
72.   </script>
73. </body>
```
- Ends the script and the body of the HTML document.

---

Would you like me to help you modularize this or add features like ETA prediction or stop markers?
